@page "/login-page"
@using Microsoft.Maui.Storage
@using TechDispoB.Models
@using TechDispoB.Services
@using TechDispoB.Services.Interfaces
@inject IAppService AppService

<h1>Connexion</h1>

<h3>Entrez vos identifiants</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <div class="form-group">
        <label for="email">Email</label>
        <input id="email" type="email" @bind-value="loginModel.Email" class="form-control" placeholder="Entrez votre email" required>
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="mt-2 form-group">
        <label for="password">Mot de passe</label>
        <input id="password" type="password" @bind-value="loginModel.Password" class="form-control" placeholder="Mot de passe" required>
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <div class="mt-2 form-group form-check">
        <input id="rememberMe" type="checkbox" @bind-value="loginModel.RememberMe" class="form-check-input">
        <label for="rememberMe" class="form-check-label">Se souvenir de moi</label>
    </div>
    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">Envoyer</button>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new();

    private async Task Submit()
    {
        try
        {
            Console.WriteLine($"Tentative de connexion avec Email: {loginModel.Email}");

            var loginResponse = await AppService.Login(loginModel);

            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
            {
                await SecureStorage.SetAsync("token", loginResponse.Token);
                Console.WriteLine($"Connexion réussie. Token reçu : {loginResponse.Token}");
                await Shell.Current.GoToAsync("//missions-list-page");
            }
            else
            {
                Console.WriteLine("Échec de la connexion : Identifiant ou mot de passe incorrect.");
                await ShowAlert("Erreur", "Identifiant ou mot de passe incorrect.");
            }
        }
        catch (Refit.ApiException apiEx) // Capture l'erreur HTTP
        {
            if (apiEx.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var errorContent = await apiEx.GetContentAsAsync<Dictionary<string, string>>();
                string errorMessage = errorContent.ContainsKey("message") ? errorContent["message"] : "Identifiant ou mot de passe incorrect.";
                await ShowAlert("Erreur", errorMessage);
            }
            else
            {
                await ShowAlert("Erreur", "Un problème est survenu. Vérifiez votre connexion.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la connexion : {ex.Message}");
            await ShowAlert("Erreur", "Un problème est survenu. Vérifiez votre connexion.");
        }
    }



    private async Task ShowAlert(string title, string message)
    {
        if (App.Current?.MainPage != null)
        {
            await App.Current.MainPage.DisplayAlert(title, message, "OK");
        }
        else
        {
            Console.WriteLine($"{title}: {message}");
        }
    }
}
