@page "/login-page"
@using Plugin.Firebase.CloudMessaging
@using TechDispoB.Models
@using TechDispoB.Services
@using TechDispoB.Services.Implementations
@using TechDispoB.Services.Interfaces
@inject IAppService AppService
@inject NavigationManager NavManager
@inject IAuthService AuthService

<h3>Login</h3>

<EditForm Model="@loginDto" OnValidSubmit="Submit">
    <div class="form-group">
        <label for="email">Email</label>
        <input id="email" type="email" @bind-value="loginDto.Email" class="form-control" placeholder="Entrez votre email" required>
        <ValidationMessage For="@(() => loginDto.Email)" />
    </div>
    <div class="mt-2 form-group">
        <label for="password">Mot de passe</label>
        <input id="password" type="password" @bind-value="loginDto.Password" class="form-control" placeholder="Mot de passe" required>
        <ValidationMessage For="@(() => loginDto.Password)" />
    </div>
    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">Se connecter</button>
    </div>
</EditForm>

@code {
    LoginDto loginDto = new();
    protected override void OnInitialized()
    {
        loginDto.Email = "stann84@hotmail.co";
        loginDto.Password = "Zalaman1.";
    }

    private async Task Submit()
    {
        // Appelle le service pour effectuer la connexion
        var loginResponse = await AuthService.Login(loginDto);

        if (loginResponse != null)
        {
            // Récupère les informations de l'utilisateur à partir de la réponse
            var user = loginResponse.User;
            Console.WriteLine($"Utilisateur : {user.UserName}, Ville : {user.City}");

            string jwtToken = loginResponse.Token;
            await SecureStorage.SetAsync("auth_token", jwtToken);

            //recupere le fcmtoken du mobile          
            var fcmToken = await CrossFirebaseCloudMessaging.Current.GetTokenAsync();
            
            if (!string.IsNullOrEmpty(fcmToken))
            {
                bool success = await AuthService.SendFCMTokenAsync(fcmToken, jwtToken);
                if (success)
                {
                    Console.WriteLine("✅ Token FCM envoyé avec succès !");
                }
                else
                {
                    Console.WriteLine("❌ Erreur lors de l'envoi du token FCM.");
                }
            }
            else
            {
                Console.WriteLine("⚠️ Aucun token FCM trouvé sur l’appareil.");
            }


            StateHasChanged();


            NavManager.NavigateTo(AppRoutes.Missions);
        }
        else
        {
            await ShowAlert("Erreur", "Identifiant ou mot de passe incorrect");
            Console.WriteLine("Échec de la connexion.");
        }
    }


    private async Task ShowAlert(string title, string message)
    {
        var currentPage = App.Current?.Windows.FirstOrDefault()?.Page;

        if (currentPage != null)
        {
            await currentPage.DisplayAlert(title, message, "OK");
        }
        else
        {
            Console.WriteLine($"{title}: {message}");
        }
    }
}
