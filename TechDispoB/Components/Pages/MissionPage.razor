@page "/mission-page/{missionId:int}"
@using TechDispoB.Models
@using TechDispoB.Services
@inject IAppService AppService

<div style="padding-bottom: 80px;">
    <div style="flex: 1;">
        <h3>Détails de la Mission</h3>
        @if (mission != null)
        {
            <p><strong>Statut mission :</strong> @mission.Status</p>
        }

        @if (mission == null)
        {
            <p>Chargement des détails...</p>
        }
        else
        {
            <div>
                <h4>@mission.Name</h4>
                <p>@mission.Description</p>
                <p>Ville : @mission.Ville</p>
                <p>Date : @mission.StartDate</p>
            </div>
        }
    </div>

    @if (showAlerte)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            Vous avez déjà accepté cette mission !
            <button type="button" class="btn-close" @onclick="()=> showAlerte = false"></button>
        </div>
    }

    @if (mission != null)
    {
        <div class="fixed-bottom d-flex justify-content-center p-3 bg-white shadow">
            @if (mission.Status == MissionStatus.AttenteValidation)
            {
                <button class="btn btn-success me-3" @onclick="VerifierMission">✅ Accepter</button>
                <button class="btn btn-danger" @onclick="RefuserMission">❌ Refuser</button>
            }
            else if (mission.Status == MissionStatus.Acceptee)
            {
                @if (mission.StartDate.Date == DateTime.Today)
                {
                    <button class="btn btn-primary me-3" @onclick="CommencerMission">▶️ Commencer</button>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>⏳ En attente du jour J</button>
                }
            }
            else if (mission.Status == MissionStatus.EnCours)
            {
                <button class="btn btn-success me-3" @onclick="CloturerMission">✅ Clôturer</button>
            }
            else if (mission.Status == MissionStatus.Cloturee)
            {
                <span class="text-muted">Mission clôturée. En attente de validation.</span>
            }
            else if (mission.Status == MissionStatus.Terminee)
            {
                <span class="text-success fw-bold">Mission terminée ✅</span>
            }
            else if (mission.Status == MissionStatus.Annulee)
            {
                <span class="text-danger fw-bold">Mission annulée ❌</span>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int MissionId { get; set; }

    private MissionDto? mission;
    private bool showAlerte = false;

    // ✅ Méthode centrale pour charger la mission
    private async Task ChargerMission()
    {
        try
        {
            mission = await AppService.GetMissionById(MissionId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement : {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ChargerMission(); // Chargement initial
        if (mission == null)
        {
            Console.WriteLine("⚠️ La mission est NULL après le chargement !");
        }
        else
        {
            Console.WriteLine($"✅ Mission chargée : {mission.Name}, Statut : {mission.Status}");
        }
    }

    private async Task VerifierMission()
    {
        if (mission != null && mission.Status == MissionStatus.Acceptee)
        {
            showAlerte = true; // Alerte si déjà acceptée
        }
        else
        {
            await AccepterMission();
        }
    }

    private async Task AccepterMission()
    {
        try
        {
            await AppService.AccepterMission(MissionId);
            await ChargerMission(); // Recharge la mission après action
            Console.WriteLine("Mission acceptée.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'acceptation : {ex.Message}");
        }
    }

    private async Task RefuserMission()
    {
        try
        {
            await AppService.RefuserMission(MissionId);
            await ChargerMission(); // Recharge après refus
            Console.WriteLine("Mission refusée.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du refus : {ex.Message}");
        }
    }

    private async Task CommencerMission()
    {
        try
        {
            await AppService.CommencerMission(MissionId);
            await ChargerMission(); // Recharge après commencer
            Console.WriteLine("Mission commencée.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur au démarrage : {ex.Message}");
        }
    }

    private async Task CloturerMission()
    {
        try
        {
            await AppService.CloturerMission(MissionId);
            await ChargerMission(); // Recharge après clôture
            Console.WriteLine("Mission clôturée.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur à la clôture : {ex.Message}");
        }
    }
}
