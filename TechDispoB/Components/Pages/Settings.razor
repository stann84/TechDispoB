@page "/settings"
@using Plugin.Firebase.CloudMessaging
@using TechDispoB.Services
@using TechDispoB.Services.Implementations
@using TechDispoB.Services.Interfaces
@inject IAppService AppService
@inject NavigationManager Navigation
@inject IAuthService AuthService

<h1 class="text-2xl font-bold mb-4">Paramètres</h1>

<div class="mb-6">
    <p>
        <span class="@(connectionMessage == "Connecté" ? "text-green-600" : "text-red-600")">
            @connectionMessage
        </span>
    </p>
    <p>
        <span class="font-semibold">Statut :</span>
        <span>@statutUser</span>
    </p>

</div>

@if (user != null)
{
    <div class="bg-white shadow-md rounded-lg p-6 mb-4">
        <h2 class="text-xl font-semibold mb-4">Informations Utilisateur</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div><span class="font-semibold">📇 ID :</span> @user.Id</div>
            <div><span class="font-semibold">📧 Email :</span> @user.Email</div>
            <div><span class="font-semibold">👤 Nom d'utilisateur :</span> @user.UserName</div>
            <div>
                <span class="font-semibold">📍 Latitude :</span>
                <input type="number" class="border p-1" @bind="user.Latitude" />
            </div>
            <div>
                <span class="font-semibold">📍 Longitude :</span>
                <input type="number" class="border p-1" @bind="user.Longitude" />
            </div>
            <div>
                <span class="font-semibold">🏙️ Ville :</span> @user.City               
            </div>
        </div>
        <div class="mt-4">
            <button @onclick="RefreshLocation" class="btn btn-secondary mr-2">
                Rafraîchir localisation
            </button>
            <button @onclick="UpdateLocation" class="btn btn-primary">
                Mettre à jour
            </button>
        </div>
    </div>
}
else
{
    <div class="p-4 rounded-md mb-4">
        <p>Aucune information utilisateur trouvée.</p>
    </div>
}
<h4>Token Firebase</h4>
<button @onclick="ShowToken" class="btn btn-success mt-4 px-4 py-2">
    Token Firebase : 
</button>

<p>

    @if (isUserConnected)
    {
        <button @onclick="Logout" class="btn btn-danger mt-4 px-4 py-2">
            Déconnexion
        </button>
    }
    else
    {
        <NavLink class="btn btn-primary mt-4 px-4 py-2" href="@AppRoutes.Login">
            Se connecter
        </NavLink>
    }
</p>


@code {
    private UserDto user = new();
    private string connectionMessage = "Récupération des données...";
    private string statutUser = "Déconnecté";
    private bool isUserConnected = false;
    private string firebaseToken = "Cliquez pour récupérer le token";

    protected override async Task OnInitializedAsync()
    {
        await CheckDatabaseConnection();
        await LoadUserData();
        isUserConnected = await AuthService.IsAuthenticated();
        statutUser = isUserConnected ? "Authentifié" : "Non Authentifié";
    }

    /// <summary>
    /// Charge les données utilisateur à partir du SecureStorage et du service.
    /// </summary>
    private async Task LoadUserData()
    {
        var userId = await SecureStorage.GetAsync("userId");
        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("Impossible de récupérer l'ID utilisateur depuis SecureStorage.");
            return;
        }
        user = await AppService.GetUserById(userId);
        if (user == null)
        {
            Console.WriteLine("L'utilisateur n'a pas été trouvé.");
        }
    }

    /// <summary>
    /// Récupère la localisation via le service de géolocalisation.
    /// </summary>
    public async Task<Location?> GetUserLocationAsync()
    {
        try
        {
            var permissionStatus = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();
            if (permissionStatus != PermissionStatus.Granted)
            {
                permissionStatus = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
                if (permissionStatus != PermissionStatus.Granted)
                {
                    Console.WriteLine("Permission de localisation refusée.");
                    return null;
                }
            }
            var location = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Medium));
            if (location != null)
            {
                Console.WriteLine($"Latitude: {location.Latitude}, Longitude: {location.Longitude}");
            }
            else
            {
                Console.WriteLine("Impossible d'obtenir la localisation.");
            }
            return location;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération de la position : {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// Met à jour la localisation automatiquement en utilisant le service de géolocalisation.
    /// Les champs liés via @bind sont mis à jour.
    /// </summary>
    private async Task RefreshLocation()
    {
        var location = await GetUserLocationAsync();
        if (location != null)
        {
            user.Latitude = location.Latitude;
            user.Longitude = location.Longitude;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Envoie la localisation (ainsi que d'autres informations modifiées) à l'API via le service.
    /// </summary>
    private async Task UpdateLocation()
    {
        var userId = await SecureStorage.GetAsync("userId");
        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("Impossible de récupérer l'ID utilisateur depuis SecureStorage.");
            return;
        }
        bool success = await AppService.UpdateUserLocationAsync(userId, user.Latitude, user.Longitude);
        if (success)
        {
            Console.WriteLine("Position mise à jour sur l'API !");
        }
        else
        {
            Console.WriteLine("Erreur lors de la mise à jour de la localisation côté API");
        }
    }

    /// <summary>
    /// Vérifie la connexion à la base de données.
    /// </summary>
    private async Task CheckDatabaseConnection()
    {
        bool canConnect = await AuthService.CanConnectToDatabase();
        connectionMessage = canConnect ? "Connecté" : "Déconnecté";
    }

    /// <summary>
    /// Déconnecte l'utilisateur et redirige vers la page de connexion.
    /// </summary>
    private async Task Logout()
    {

        await AuthService.Logout();
        isUserConnected = false;
        statutUser = "Déconnecté";
        Navigation.NavigateTo(AppRoutes.Login, true);
    }



private async Task ShowToken()
    {
        try
        {
            #if ANDROID 
            await CrossFirebaseCloudMessaging.Current.CheckIfValidAsync();
            await Task.Delay(3000);
            var token = await CrossFirebaseCloudMessaging.Current.GetTokenAsync();
            Console.WriteLine($"token  : {token}");

            if (!string.IsNullOrEmpty(token))
            {
                firebaseToken = token;
                Console.WriteLine($"🔥 FCM token: {token}");

                // Optionnel : partager le token
                await Share.RequestAsync(new ShareTextRequest
                {
                    Text = token,
                    Title = "Firebase Token"
                });

                // Met à jour l'affichage Blazor
                StateHasChanged();
            }
            else
            {
                firebaseToken = "Aucun token généré.";
                Console.WriteLine("❌ Aucun token Firebase généré !");
                StateHasChanged();
            }
            #else
            firebaseToken = "Non supporté sur cette plateforme.";
            StateHasChanged();
            #endif
        }
        catch (Exception ex)
        {
            firebaseToken = "Erreur : " + ex.Message;
            Console.WriteLine($"🔥 Erreur lors de la récupération du token : {ex.Message}");
            StateHasChanged();
        }
    }
}
